name: CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: |
            6.0.x
            3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Azure login
        uses: azure/login@v1.4.5
        if: matrix.name == 'Windows'
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup RavenDB
        id: setup-ravendb
        uses: Particular/setup-ravendb-action@v1.0.0
        with:
            single-connection-string-name: RavenSingleNodeUrl
            cluster-connection-string-name: CommaSeparatedRavenClusterUrls
            ravendb-license: ${{ secrets.RAVENDB_LICENSE }}
            ravendb-mode: Both
            tag: RavenDBPersistence
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Download Urls
        uses: actions/download-artifact@v3.0.0
        with:
          name: ravendburls
      - name: Prepare for tests
        id: prepare
        shell: pwsh
        run: |
          # Unfortunately masking breaks job outputs so we go the extra mile
          gpg --quiet --batch --yes --decrypt --passphrase='${{ secrets.PASSPHRASE }}' --output singlenodeurl.txt singlenodeurl.txt.gpg
          gpg --quiet --batch --yes --decrypt --passphrase='${{ secrets.PASSPHRASE }}' --output clusterurl.txt clusterurl.txt.gpg
          $singlenodeurl = cat singlenodeurl.txt
          echo "::add-mask::$singlenodeurl"
          echo "::set-output name=singlenodeurl::$singlenodeurl"
          $clusterurl = cat clusterurl.txt
          echo "::add-mask::$clusterurl"
          echo "::set-output name=clusterurl::$clusterurl"
      - name: Run tests
        env:
          RavenSingleNodeUrl: ${{ steps.prepare.outputs.singlenodeurl }}
          CommaSeparatedRavenClusterUrls: ${{ steps.prepare.outputs.clusterurl }}
        uses: Particular/run-tests-action@v1.3.0   
