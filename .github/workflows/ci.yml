name: CI
on:
  push:
    branches:
      - master
      - release-[5-9].*
  pull_request:
    branches-ignore:
      - release-[0-4].*
  pull_request_target:
    branches-ignore:
      - release-[0-4].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  setup:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: Setup RavenDB
    runs-on: ubuntu-20.04
    outputs:
      prefix: ${{ steps.setup-ravendb.outputs.prefix }}
      singlenodeurl: ${{ steps.setup-ravendb.outputs.singlenodeurl }}
      clusterurl: ${{ steps.setup-ravendb.outputs.clusterurl }}
    steps:
      - name: Azure login
        uses: azure/login@v1.4.1
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Setup RavenDB
        id: setup-ravendb
        shell: pwsh
        run: |
          $hostInfo = curl -H Metadata:true "169.254.169.254/metadata/instance?api-version=2017-08-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          $license = '${{ secrets.RAVENDB_LICENSE }}'

          function NewRavenDBNode {
              param (
                  $region,
                  $prefix,
                  $instanceId,
                  $runnerOs,
                  $commit
              )

              $hostname = "$prefix-$instanceId"

              # echo will mess up the return value
              Write-Debug "Creating RavenDB container $hostname in $region (This can take a while.)"

              $details = az container create --image ravendb/ravendb:5.2-ubuntu-latest --name $hostname --location $region --dns-name-label $hostname --resource-group GitHubActions-RG --cpu 4 --memory 8 --ports 8080 38888 --ip-address public --environment-variables RAVEN_ServerUrl="http://0.0.0.0:8080" RAVEN_ServerUrl_Tcp="tcp://0.0.0.0:38888" RAVEN_PublicServerUrl="http://$($hostname).$($region).azurecontainer.io:8080" RAVEN_PublicServerUrl_Tcp="tcp://$($hostname).$($region).azurecontainer.io:38888" RAVEN_Setup_Mode="None" RAVEN_License_Eula_Accepted="true" RAVEN_Security_UnsecuredAccessAllowed="PublicNetwork" | ConvertFrom-Json
              
              # echo will mess up the return value
              Write-Debug "Tagging container image"
              $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
              $ignore = az tag create --resource-id $details.id --tags Package=RavenPersistence RunnerOS=$runnerOs Commit=$commit $dateTag

              return $details.ipAddress.fqdn
          }

          $prefix = "psw-ravendb-$(Get-Random)"

          echo "::set-output name=prefix::$prefix"

          $fqdnRavenDB = @{ singlenode = ""; leader = ""; follower1 = ""; follower2 = "" }

          $NewRavenDBNodeDef = $function:NewRavenDBNode.ToString()

          @($fqdnRavenDB.keys) | ForEach-Object -Parallel {
              $function:NewRavenDBNode = $using:NewRavenDBNodeDef
              $region = $using:region;
              $prefix = $using:prefix;
              $detail = NewRavenDBNode $region $prefix $_ ${{ runner.os }} ${{ github.sha }}
              $hashTable = $using:fqdnRavenDB;
              $hashTable[$_] = $detail
          }

          @($fqdnRavenDB.keys) | ForEach-Object -Parallel {
              $hashTable = $using:fqdnRavenDB;
              echo "::add-mask::$hashTable[$_]"
              $tcpClient = New-Object Net.Sockets.TcpClient
              echo "Verifying connection $_"
              do
              {
                  try
                  {
                      echo "Trying to connect to $_"
                      $tcpClient.Connect($hashTable[$_], 8080)
                      echo "Connection to $_ successful"
                  } catch 
                  {
                      Start-Sleep -Seconds 2
                  }
              } While($tcpClient.Connected -ne "True")
              $tcpClient.Close()
              echo "Connection to $_ verified"
          }

          # Once you set the license on a node, it assumes the node to be a cluster, so only set the license on the leader
          echo "Activating license on singlenode"
          curl "http://$($fqdnRavenDB['singlenode']):8080/admin/license/activate" -H 'Content-Type: application/json; charset=UTF-8' -d "$($license)"

          # Once you set the license on a node, it assumes the node to be a cluster, so only set the license on the leader
          echo "Activating license on leader"
          curl "http://$($fqdnRavenDB['leader']):8080/admin/license/activate" -H 'Content-Type: application/json; charset=UTF-8' -d "$($license)"

          curl "http://$($fqdnRavenDB['leader']):8080/admin/license/set-limit?nodeTag=A&newAssignedCores=1" -X POST -H 'Content-Type: application/json; charset=utf-8' -H 'Content-Length: 0'
          $encodedURL = [System.Web.HttpUtility]::UrlEncode("http://$($fqdnRavenDB['follower1']):8080") 
          curl "http://$($fqdnRavenDB['leader']):8080/admin/cluster/node?url=$($encodedURL)&tag=B&watcher=true&assignedCores=1" -X PUT -H 'Content-Type: application/json; charset=utf-8' -H 'Content-Length: 0'
          $encodedURL = [System.Web.HttpUtility]::UrlEncode("http://$($fqdnRavenDB['follower2']):8080")
          curl "http://$($fqdnRavenDB['leader']):8080/admin/cluster/node?url=$($encodedURL)&

          $singlenodeurl = "http://$($fqdnRavenDB['singlenode']):8080";
          echo "::set-output name=singlenodeurl::$singlenodeurl"
          echo "::add-mask::$singlenodeurl"

          $clusterurl = "http://$($fqdnRavenDB['leader']):8080,http://$($fqdnRavenDB['follower1']):8080,http://$($fqdnRavenDB['follower2']):8080"
          echo "::set-output name=clusterurl::$clusterurl"
          echo "::add-mask::$clusterurl"

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Run tests
        env:
          RavenSingleNodeUrl: ${{ needs.setup.outputs.singlenodeurl }}
          CommaSeparatedRavenClusterUrls: ${{ needs.setup.outputs.clusterurl }}
        uses: Particular/run-tests-action@v1.0.0

  cleanup:
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    needs: [setup, build]
    steps:
      - name: Azure login
        uses: azure/login@v1.4.1
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Teardown RavenDB
        if: ${{ always() }}
        uses: Azure/powershell@v1
        with:
          inlineScript: Get-AzContainerGroup -ResourceGroupName GitHubActions-RG | Where-Object { $_.Name -like "${{ needs.setup.outputs.prefix }}*" } | Remove-AzContainerGroup | Out-Null
          azPSVersion: latest      
