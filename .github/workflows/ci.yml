name: CI
on:
  push:
    branches:
      - master
      - release-[5-9].*
  pull_request:
    branches-ignore:
      - release-[0-4].*
  pull_request_target:
    branches-ignore:
      - release-[0-4].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
defaults:
  run:
    shell: pwsh
jobs:
  setup:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: Setup
    outputs:
      hostname: ${{ steps.setup.outputs.hostname }}
      ravenfqdn: ${{ steps.setup.outputs.fqdn }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup infrastructure
        id: infra
        run: |
          $hostname = "psw-ravendb-$(Get-Random)"
          echo "::set-output name=hostname::$hostname"
          echo "Creating RavenDB container $name (This can take awhile.)"
          $details = az container create --image ravendb/ravendb:4.2-ubuntu-latest --name $hostname --dns-name-label $hostname --resource-group GitHubActions-RG --cpu 1 --memory 3.5 --ports 8080 38888 --ip-address public -e RAVEN_ARGS='--ServerUrl=http://0.0.0.0:8080 --Setup.Mode=None --License.Eula.Accepted=true --Security.UnsecuredAccessAllowed=PublicNetwork' | ConvertFrom-Json

          $fqdn=$details.ipAddress.fqdn
          #echo "::add-mask::$fqdn"
          echo "::set-output name=fqdn::$fqdn"

          echo "Tagging container image"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
          $ignore = az tag create --resource-id $details.id --tags Package=RavenPersistence RunnerOS=${{ runner.os }} $dateTag
  build:
    needs: setup
    name: ${{matrix.framework}} on ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04 ]
        framework: [ netcoreapp3.1, net472 ]
        exclude:
          - os: ubuntu-20.04
            framework: net472
      fail-fast: false
    env:
      CommaSeparatedRavenClusterUrls: "http://${{ needs.setup.outputs.ravenfqdn }}:8080"
    steps:
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: ${{ matrix.os == 'windows-2019' && matrix.framework == 'netcoreapp3.1' }}
        uses: actions/upload-artifact@v2.2.2
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Run tests
        run: dotnet test src --framework ${{ matrix.framework }} --logger "GitHubActions;report-warnings=false"
  cleanup:
    needs: [setup, build]
    name: Cleanup
    if: ${{ always() && needs.setup != null && needs.setup.result == 'success' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Teardown infrastructure
        run: $ignore = az container delete --resource-group GitHubActions-RG --name ${{ needs.build.outputs.hostname }} --yes
