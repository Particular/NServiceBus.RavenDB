name: CI
on:
  push:
    branches:
      - master
      - release-[5-9].*
  pull_request:
    branches-ignore:
      - release-[0-4].*
  pull_request_target:
    branches-ignore:
      - release-[0-4].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          - os: windows-2019
            name: Windows
          - os: ubuntu-20.04
            name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.4.0
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0          
      - name: Azure login
        uses: azure/login@v1.4.2
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          enable-AzPSSession: true          
      - name: Setup RavenDB
        id: setup-ravendb
        shell: pwsh
        run: |
          $hostInfo = curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          $license = '${{ secrets.RAVENDB_LICENSE }}'

          function NewRavenDB {
              param (
                  $region,
                  $prefix,
                  $runnerOs,
                  $commit
              )

              echo "Creating RavenDB container group $prefix in $region (This can take a while.)"

              $containerImage = "ravendb/ravendb:5.3-ubuntu-latest"
              (Get-Content cluster.yml).replace('__NAME__', $prefix).replace('__REGION__', $region) | Set-Content cluster.replace.yml | Out-Null
              $details = az container create --resource-group GitHubActions-RG --file cluster.replace.yml | ConvertFrom-Json
              
              echo "Tagging container image"
              $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
              az tag create --resource-id $details.id --tags Package=RavenGatewayPersistence RunnerOS=$runnerOs Commit=$commit $dateTag | Out-Null
          }

          $prefix = "psw-ravendb-$(Get-Random)"

          echo "::set-output name=prefix::$prefix"

          NewRavenDB $region $prefix ${{ runner.os }} ${{ github.sha }}

          $fqdn = "$prefix.$region.azurecontainer.io"

          $fqdnRavenDB = @{ singlenode = "$($fqdn):8080"; leader = "$($fqdn):8081"; follower1 = "$($fqdn):8082"; follower2 = "$($fqdn):8083" }

          @($fqdnRavenDB.keys) | ForEach-Object -Parallel {
              $startDate = Get-Date
              $hashTable = $using:fqdnRavenDB
              $tcpClient = New-Object Net.Sockets.TcpClient
              $nodeName = $_
              echo "Verifying connection $nodeName"
              do
              {
                  try
                  {
                      echo "Trying to connect to $nodeName"
                      $fqdnAndPort = $hashTable[$nodeName].Split(":")
                      $tcpClient.Connect($fqdnAndPort[0], $fqdnAndPort[1])
                      echo "Connection to $nodeName successful"
                  } catch 
                  {
                      if($startDate.AddMinutes(3) -lt (Get-Date)) 
                      {
                        throw "Unable to connect to $nodeName"
                      }
                      Start-Sleep -Seconds 2
                  }
              } While($tcpClient.Connected -ne "True")
              $tcpClient.Close()
              echo "Connection to $nodeName verified"
          }

          # Once you set the license on a node, it assumes the node to be a cluster, so only set the license on the leader
          echo "Activating license on singlenode"
          curl "http://$($fqdnRavenDB['singlenode'])/admin/license/activate" -H 'Content-Type: application/json; charset=UTF-8' -d "$($license)"

          # Once you set the license on a node, it assumes the node to be a cluster, so only set the license on the leader
          echo "Activating license on leader"
          curl "http://$($fqdnRavenDB['leader'])/admin/license/activate" -H 'Content-Type: application/json; charset=UTF-8' -d "$($license)"

          curl "http://$($fqdnRavenDB['leader'])/admin/license/set-limit?nodeTag=A&newAssignedCores=1" -X POST -H 'Content-Type: application/json; charset=utf-8' -H 'Content-Length: 0'
          $encodedURL = [System.Web.HttpUtility]::UrlEncode("http://$($fqdnRavenDB['follower1'])") 
          curl "http://$($fqdnRavenDB['leader'])/admin/cluster/node?url=$($encodedURL)&tag=B&watcher=true&assignedCores=1" -X PUT -H 'Content-Type: application/json; charset=utf-8' -H 'Content-Length: 0'
          $encodedURL = [System.Web.HttpUtility]::UrlEncode("http://$($fqdnRavenDB['follower2'])")
          curl "http://$($fqdnRavenDB['leader'])/admin/cluster/node?url=$($encodedURL)&tag=C&watcher=true&assignedCores=1" -X PUT -H 'Content-Type: application/json; charset=utf-8' -H 'Content-Length: 0'

          $singlenodeurl = "http://$($fqdnRavenDB['singlenode'])"
          echo "::set-output name=singlenodeurl::$singlenodeurl"
          echo "::add-mask::$singlenodeurl"

          $clusterurl = "http://$($fqdnRavenDB['leader']),http://$($fqdnRavenDB['follower1']),http://$($fqdnRavenDB['follower2'])"
          echo "::set-output name=clusterurl::$clusterurl"
          echo "::add-mask::$clusterurl"

          echo "CommaSeparatedRavenClusterUrls=$($clusterurl)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append          
          echo "RavenSingleNodeUrl=$($singlenodeurl)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: 5.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Run tests
        env:
          RavenSingleNodeUrl: ${{ steps.prepare.outputs.singlenodeurl }}
          CommaSeparatedRavenClusterUrls: ${{ steps.prepare.outputs.clusterurl }}
        uses: Particular/run-tests-action@v1.0.0
      - name: Teardown infrastructure
        if: ${{ always() }}
        continue-on-error: true
        with:
          inlineScript: Get-AzContainerGroup -ResourceGroupName GitHubActions-RG | Where-Object { $_.Name -like "${{ steps.setup-ravendb.outputs.prefix }}*" } | Remove-AzContainerGroup | Out-Null
          azPSVersion: latest