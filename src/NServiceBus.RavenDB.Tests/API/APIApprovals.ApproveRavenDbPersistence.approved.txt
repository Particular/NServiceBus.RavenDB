namespace NServiceBus.Features
{
    
    public class RavenDbSagaStorage : NServiceBus.Features.Feature
    {
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace NServiceBus.Gateway.Deduplication
{
    
    public class GatewayMessage
    {
        public GatewayMessage() { }
        public string Id { get; set; }
        public System.DateTime TimeReceived { get; set; }
    }
}
namespace NServiceBus.RavenDB
{
    
    public class ConnectionParameters
    {
        public ConnectionParameters() { }
        public string ApiKey { get; set; }
        public System.Net.ICredentials Credentials { get; set; }
        public string DatabaseName { get; set; }
        public string Url { get; set; }
    }
}
namespace NServiceBus.RavenDB.Outbox
{
    
    public class static RavenDBOutboxExtensions
    {
        public static NServiceBus.EndpointConfiguration SetFrequencyToRunDeduplicationDataCleanup(this NServiceBus.EndpointConfiguration configuration, System.TimeSpan frequencyToRunDeduplicationDataCleanup) { }
        public static NServiceBus.EndpointConfiguration SetTimeToKeepDeduplicationData(this NServiceBus.EndpointConfiguration configuration, System.TimeSpan timeToKeepDeduplicationData) { }
    }
}
namespace NServiceBus.RavenDB.Persistence
{
    
    public interface IAsyncSessionProvider
    {
        Raven.Client.IAsyncDocumentSession AsyncSession { get; }
    }
    [System.ObsoleteAttribute("The session is now exposed through SynchronizedStorageSession.RavenSession(). For" +
        " handlers use context.SynchronizedStorageSession.RavenSession(). For. Will be re" +
        "moved in version 5.0.0.", true)]
    public interface ISessionProvider { }
}
namespace NServiceBus
{
    
    public class static RavenDbGatewayDeduplicationSettingsExtensions
    {
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseDocumentStoreForGatewayDeduplication(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, Raven.Client.IDocumentStore documentStore) { }
    }
    public class RavenDBPersistence : NServiceBus.Persistence.PersistenceDefinition
    {
        public RavenDBPersistence() { }
    }
    public class static RavenDbSagaSettingsExtensions
    {
        [System.ObsoleteAttribute("As of Version 6 of NServiceBus core all correlated properties are unique by defau" +
            "lt so you can safely remove this setting. Will be removed in version 5.0.0.", true)]
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> AllowStaleSagaReads(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseDocumentStoreForSagas(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, Raven.Client.IDocumentStore documentStore) { }
    }
    public class static RavenDbSettingsExtensions
    {
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> DoNotSetupDatabasePermissions(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> IConfirmToUseAStorageEngineWhichDoesntSupportDtcWhilstLeavingDistributedTransactionSupportEnabled(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> SetDefaultDocumentStore(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, Raven.Client.IDocumentStore documentStore) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> SetDefaultDocumentStore(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, NServiceBus.RavenDB.ConnectionParameters connectionParameters) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> SetMessageToDatabaseMappingConvention(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, System.Func<System.Collections.Generic.IDictionary<string, string>, string> convention) { }
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseSharedAsyncSession(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, System.Func<Raven.Client.IAsyncDocumentSession> getAsyncSessionFunc) { }
        [System.ObsoleteAttribute("Use the \'UseSharedAsyncSession\' configuration extension method to provide an asyn" +
            "c session. Will be removed in version 5.0.0.", true)]
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseSharedSession(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, System.Func<Raven.Client.IDocumentSession> getSessionFunc) { }
    }
    public class static RavenDbSubscriptionSettingsExtensions
    {
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseDocumentStoreForSubscriptions(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, Raven.Client.IDocumentStore documentStore) { }
    }
    public class static RavenDbTimeoutSettingsExtensions
    {
        public static NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> UseDocumentStoreForTimeouts(this NServiceBus.PersistenceExtentions<NServiceBus.RavenDBPersistence> cfg, Raven.Client.IDocumentStore documentStore) { }
    }
    public class static RavenSessionExtension
    {
        public static Raven.Client.IAsyncDocumentSession RavenSession(this NServiceBus.Persistence.SynchronizedStorageSession session) { }
    }
}
namespace NServiceBus.Testing
{
    
    public class TestableRavenStorageSession : NServiceBus.Persistence.SynchronizedStorageSession
    {
        public TestableRavenStorageSession(Raven.Client.IAsyncDocumentSession session) { }
        public Raven.Client.IAsyncDocumentSession Session { get; }
    }
}